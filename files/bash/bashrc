# vim:foldmethod=marker:foldlevel=0
#{{{ COMMON
. "${HOME}/.functions.sh"
#{{{ check macOS
if [ $(uname) = 'Darwin' ]; then
  export IS_MACOS=1
  if is_exec brew; then
    BREW_PREFIX=$(brew --prefix)
  fi
fi
#}}}
#{{{ setup locale
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
#}}}
#{{{ setup common elements of PATH
prepend_to_var PATH '/sbin'
prepend_to_var PATH '/usr/sbin'
prepend_to_var PATH '/usr/local/sbin'
#}}}
#{{{ macOS specific PATH setup
if [ "${IS_MACOS}" ]; then
  if [ -n "${BREW_PREFIX}" ]; then
    if [ -d "${BREW_PREFIX}/opt/coreutils" ]; then
      prepend_to_var PATH "${BREW_PREFIX}/opt/coreutils/libexec/gnubin"
    fi
    if [ -d "${BREW_PREFIX}/opt/ruby" ]; then
      prepend_to_var PATH "${BREW_PREFIX}/opt/ruby/bin"
    fi
    if [ -d "${BREW_PREFIX}/opt/perl" ]; then
      prepend_to_var PATH "${BREW_PREFIX}/opt/perl/bin"
    fi
  fi
fi
#}}}
#{{{ add home bin to PATH
prepend_to_var PATH "${HOME}/bin"
#}}}
#{{{ setup golang environment
if is_exec go; then
  export GOPATH="${HOME}/go"
  prepend_to_var PATH "${GOPATH}/bin"
fi
#}}}
#{{{ setup rust environment
if [ -d "${HOME}/.cargo/bin" ]; then
  prepend_to_var PATH "${HOME}/.cargo/bin"
fi
#}}}
#{{{ setup haskell environment
if is_exec stack; then
  prepend_to_var PATH "${HOME}/.local/bin"
fi
#}}}
#{{{ setup javascript environment
if is_exec yarn; then
  prepend_to_var PATH "${HOME}/.config/yarn/global/node_modules/.bin"
  prepend_to_var PATH 'node_modules/.bin'
fi
#}}}
#{{{ fzf
if is_exec fd; then
  export FZF_DEFAULT_COMMAND='fd --type f'
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi
export FZF_CTRL_T_OPTS="--preview '(cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"
[ -r ~/.fzf.bash ] && source ~/.fzf.bash
#}}}
#{{{ pyenv
if is_exec pyenv; then
  eval "$(pyenv init -)"
  if is_exec pyenv-virtuenv-init; then
    eval "$(pyenv virtualenv-init -)"
  fi
fi
#}}}
#}}}
if [ -z "${PS1}" ]; then
  return
fi
#{{{ INTERACTIVE
#{{{ macOS specific
if [ "${IS_MACOS}" ]; then
  if [ -n "${BREW_PREFIX}" ]; then
    if [ -r "${BREW_PREFIX}/etc/profile.d/bash_completion.sh" ]; then
      export BASH_COMPLETION_COMPAT_DIR="${BREW_PREFIX}/etc/bash_completion.d"
      . "${BREW_PREFIX}/etc/profile.d/bash_completion.sh"
    fi
    if [ -d "${BREW_PREFIX}/opt/python" ]; then
      export PKG_CONFIG_PATH=${BREW_PREFIX}/opt/python/Frameworks/Python.framework/Versions/Current/lib/pkgconfig/
    fi
  fi

  if is_exec stack; then
    eval "$(stack --bash-completion-script stack)"
  fi

  alias sudoedit='sudo -e'
fi
#}}}
#{{{ editor
if [ -n "${NVIM_LISTEN_ADDRESS}" ]; then
  if is_exec nvr; then
    alias nvim=nvr
  else
    alias nvim='echo "No nesting!"'
  fi
fi
if [ -z "${VISUAL}" ]; then
  export VISUAL='nvim'
fi
alias e='nvim'
alias el='NVIM_LISTEN_ADDRESS=/tmp/nvim e'
alias es='[ -r .vim/Session.vim ] && e -S .vim/Session.vim'
alias eg='[ -d .git ] && e +MagitOnly'
#}}}
#{{{ pager
export PAGER='less -RF --mouse'
export BAT_PAGER="${PAGER}"
export DELTA_PAGER="${PAGER}"
#}}}
#{{{ powerline
PS_SYMBOL='îœ‘'
[ -r ~/.bash-powerline.sh ] && source ~/.bash-powerline.sh
#}}}
#{{{ history
export HISTCONTROL=ignoreboth
export HISTSIZE=10000
shopt -s histappend
#}}}
#{{{ other shell options
shopt -s cdspell
shopt -s autocd
shopt -s direxpand
#}}}
#{{{ aliases
alias l='ls -F --color=auto --group-directories'
alias ll='l -l'
alias la='ll -a'
alias df='df -h'
alias du='du -h'
alias grep='grep --color'
alias r="bat"
#}}}
#{{{ pass
if [ -d ~/.password-store ]; then
  export PASSWORD_STORE_ENABLE_EXTENSIONS=true
fi
#}}}
#{{{ dircolors
is_exec dircolors && [ -r ~/.dir_colors ] && eval $(dircolors ~/.dir_colors)
#}}}
#{{{ refresh environment in tmux sessions
 [ -r ~/.bash-preexec.sh ] && source ~/.bash-preexec.sh
 if [ -n "$TMUX" ]; then
   function refresh() {
     for var_name in DISPLAY SSH_AUTH_SOCK SSH_CONNECTION; do
       eval $(tmux showenv -s ${var_name})
     done
   }
 else
   function refresh() {
     return
   }
 fi
 preexec() {
   refresh
 }
# }}}
#{{{ kill X11 clipboard server when SSH connection is closed
if is_remote_session && [ "$SHLVL" -eq 1 ]; then
  function onexit {
    if [ $(uname) == 'Darwin' ]; then
      pkill -f xclip
    else
      pkill -f xsel
    fi
  }
  trap onexit EXIT
fi
#}}}
#{{{ local
if [ -r ${HOME}/.bashrc.local ]; then
  . ${HOME}/.bashrc.local
fi
#}}}
#{{{ tmux autostart
if shopt -q login_shell && is_exec tmux; then
  #if not inside a tmux session, and if no session is started, start a new session
  if [ "$TERM" != "tmux-256color" ]; then
    tmux attach -t default || tmux new-session -s default
  fi
fi
#}}}
#}}}
